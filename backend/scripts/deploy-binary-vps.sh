#!/bin/bash

# üöÄ Script de D√©ploiement Binaire VPS - MeshaPlus Backend
# Ce script d√©ploie directement le binaire sur le VPS sans Docker

set -e

# Configuration
APP_NAME="meshaplus-backend"
DEPLOY_PATH="/opt/meshaplus"
BINARY_PATH="/opt/meshaplus/bin"
CONFIG_PATH="/opt/meshaplus/configs"
LOG_PATH="/var/log/meshaplus"
SERVICE_NAME="meshaplus-backend"
USER_NAME="meshaplus"

# Couleurs pour les logs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fonction de logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log "üîç V√©rification des pr√©requis..."
    
    # V√©rifier que le binaire existe
    if [ ! -f "bin/api" ]; then
        log_error "Le binaire bin/api n'existe pas"
        exit 1
    fi
    
    # V√©rifier que les configs existent
    if [ ! -f "configs/config.prod.yaml" ]; then
        log_error "Le fichier de configuration configs/config.prod.yaml n'existe pas"
        exit 1
    fi
    
    log_success "Pr√©requis v√©rifi√©s"
}

# Cr√©ation des r√©pertoires et utilisateur
setup_environment() {
    log "üìÅ Configuration de l'environnement..."
    
    # Cr√©er l'utilisateur si il n'existe pas
    if ! id "$USER_NAME" &>/dev/null; then
        sudo useradd -r -s /bin/false -d "$DEPLOY_PATH" "$USER_NAME"
        log_success "Utilisateur $USER_NAME cr√©√©"
    fi
    
    # Cr√©er les r√©pertoires
    sudo mkdir -p "$DEPLOY_PATH"
    sudo mkdir -p "$BINARY_PATH"
    sudo mkdir -p "$CONFIG_PATH"
    sudo mkdir -p "$LOG_PATH"
    sudo mkdir -p "$DEPLOY_PATH/uploads"
    
    # Changer les permissions
    sudo chown -R "$USER_NAME:$USER_NAME" "$DEPLOY_PATH"
    sudo chown -R "$USER_NAME:$USER_NAME" "$LOG_PATH"
    
    log_success "Environnement configur√©"
}

# Sauvegarde de l'ancienne version
backup_previous_version() {
    log "üíæ Sauvegarde de l'ancienne version..."
    
    if [ -f "$BINARY_PATH/api" ]; then
        # Arr√™ter le service s'il tourne
        if sudo systemctl is-active --quiet "$SERVICE_NAME"; then
            sudo systemctl stop "$SERVICE_NAME"
            log_success "Ancien service arr√™t√©"
        fi
        
        # Cr√©er une sauvegarde
        sudo cp "$BINARY_PATH/api" "$BINARY_PATH/api.backup.$(date +%Y%m%d-%H%M%S)"
        log_success "Ancienne version sauvegard√©e"
    else
        log_warning "Aucune version pr√©c√©dente trouv√©e"
    fi
}

# D√©ploiement du binaire
deploy_binary() {
    log "üì¶ D√©ploiement du binaire..."
    
    # Copier le binaire
    sudo cp bin/api "$BINARY_PATH/"
    sudo chown "$USER_NAME:$USER_NAME" "$BINARY_PATH/api"
    sudo chmod +x "$BINARY_PATH/api"
    
    # Copier les configurations
    sudo cp configs/config.prod.yaml "$CONFIG_PATH/"
    sudo chown "$USER_NAME:$USER_NAME" "$CONFIG_PATH/config.prod.yaml"
    
    log_success "Binaire d√©ploy√©"
}

# Cr√©ation du service systemd
create_systemd_service() {
    log "üîß Cr√©ation du service systemd..."
    
    cat << EOF | sudo tee /etc/systemd/system/$SERVICE_NAME.service
[Unit]
Description=MeshaPlus Backend API
After=network.target postgresql.service
Wants=postgresql.service

[Service]
Type=simple
User=$USER_NAME
Group=$USER_NAME
WorkingDirectory=$DEPLOY_PATH
ExecStart=$BINARY_PATH/api
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=$SERVICE_NAME

# Variables d'environnement
Environment=CONFIG_FILE=$CONFIG_PATH/config.prod.yaml
Environment=PORT=8080

# S√©curit√©
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=$DEPLOY_PATH $LOG_PATH

[Install]
WantedBy=multi-user.target
EOF

    # Recharger systemd
    sudo systemctl daemon-reload
    sudo systemctl enable "$SERVICE_NAME"
    
    log_success "Service systemd cr√©√©"
}

# V√©rification des services locaux
check_local_services() {
    log "üîç V√©rification des services locaux..."
    
    # V√©rifier PostgreSQL
    if ! sudo systemctl is-active --quiet postgresql; then
        log_warning "PostgreSQL n'est pas en cours d'ex√©cution"
        log "Pour installer PostgreSQL: sudo apt update && sudo apt install postgresql postgresql-contrib"
        log "Pour d√©marrer PostgreSQL: sudo systemctl start postgresql && sudo systemctl enable postgresql"
    else
        log_success "PostgreSQL est en cours d'ex√©cution"
    fi
    
    # V√©rifier Redis (optionnel)
    if command -v redis-server &> /dev/null; then
        if ! sudo systemctl is-active --quiet redis-server; then
            log_warning "Redis n'est pas en cours d'ex√©cution"
            log "Pour d√©marrer Redis: sudo systemctl start redis-server && sudo systemctl enable redis-server"
        else
            log_success "Redis est en cours d'ex√©cution"
        fi
    else
        log_warning "Redis n'est pas install√©"
        log "Pour installer Redis: sudo apt update && sudo apt install redis-server"
    fi
}

# D√©marrage de l'application
start_application() {
    log "üöÄ D√©marrage de l'application..."
    
    # D√©marrer le service
    sudo systemctl start "$SERVICE_NAME"
    
    if [ $? -eq 0 ]; then
        log_success "Application d√©marr√©e"
    else
        log_error "√âchec du d√©marrage de l'application"
        sudo systemctl status "$SERVICE_NAME"
        exit 1
    fi
}

# V√©rification de la sant√© de l'application
health_check() {
    log "üè• V√©rification de la sant√© de l'application..."
    
    # Attendre que l'application soit pr√™te
    sleep 10
    
    # Test de sant√©
    for i in {1..10}; do
        if curl -f http://localhost:8080/api/v1/health >/dev/null 2>&1; then
            log_success "Application en bonne sant√©"
            return 0
        fi
        
        log_warning "Tentative $i/10 - Application pas encore pr√™te"
        sleep 5
    done
    
    log_error "L'application n'est pas en bonne sant√© apr√®s 10 tentatives"
    return 1
}

# Configuration de Nginx (optionnel)
setup_nginx() {
    log "üåê Configuration de Nginx..."
    
    if command -v nginx &> /dev/null; then
        cat << EOF | sudo tee /etc/nginx/sites-available/$SERVICE_NAME
server {
    listen 80;
    server_name _;
    
    location / {
        proxy_pass http://localhost:8080;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

        # Activer le site
        sudo ln -sf /etc/nginx/sites-available/$SERVICE_NAME /etc/nginx/sites-enabled/
        sudo nginx -t && sudo systemctl reload nginx
        
        log_success "Nginx configur√©"
    else
        log_warning "Nginx n'est pas install√©"
        log "Pour installer Nginx: sudo apt update && sudo apt install nginx"
    fi
}

# Nettoyage des anciennes sauvegardes
cleanup_old_backups() {
    log "üßπ Nettoyage des anciennes sauvegardes..."
    
    # Garder seulement les 5 derni√®res sauvegardes
    find "$BINARY_PATH" -name "api.backup.*" -type f -printf '%T@ %p\n' | \
    sort -nr | tail -n +6 | cut -d' ' -f2- | xargs -r sudo rm -f
    
    log_success "Nettoyage termin√©"
}

# Affichage des informations de d√©ploiement
show_deployment_info() {
    log "üìä Informations de d√©ploiement..."
    
    echo ""
    echo "üéâ D√©ploiement termin√© avec succ√®s !"
    echo ""
    echo "üìã Informations :"
    echo "‚Ä¢ Application: $APP_NAME"
    echo "‚Ä¢ Version: $(date +%Y-%m-%d\ %H:%M:%S)"
    echo "‚Ä¢ Port: 8080"
    echo "‚Ä¢ Binaire: $BINARY_PATH/api"
    echo "‚Ä¢ Config: $CONFIG_PATH/config.prod.yaml"
    echo "‚Ä¢ Logs: $LOG_PATH"
    echo "‚Ä¢ Service: $SERVICE_NAME"
    echo ""
    echo "üîç Commandes utiles :"
    echo "‚Ä¢ Statut: sudo systemctl status $SERVICE_NAME"
    echo "‚Ä¢ Logs: sudo journalctl -u $SERVICE_NAME -f"
    echo "‚Ä¢ Red√©marrer: sudo systemctl restart $SERVICE_NAME"
    echo "‚Ä¢ Arr√™ter: sudo systemctl stop $SERVICE_NAME"
    echo "‚Ä¢ D√©marrer: sudo systemctl start $SERVICE_NAME"
    echo ""
    echo "üåê Acc√®s :"
    echo "‚Ä¢ API: http://localhost:8080"
    echo "‚Ä¢ Health: http://localhost:8080/api/v1/health"
    echo "‚Ä¢ Swagger: http://localhost:8080/swagger/index.html"
    echo ""
}

# Fonction principale
main() {
    log "üöÄ D√©but du d√©ploiement binaire MeshaPlus Backend"
    echo "=============================================="
    
    # V√©rifier les pr√©requis
    check_prerequisites
    
    # Configurer l'environnement
    setup_environment
    
    # Sauvegarder l'ancienne version
    backup_previous_version
    
    # D√©ployer le binaire
    deploy_binary
    
    # Cr√©er le service systemd
    create_systemd_service
    
    # V√©rifier les services locaux
    check_local_services
    
    # Configurer Nginx
    setup_nginx
    
    # D√©marrer l'application
    start_application
    
    # V√©rifier la sant√©
    if health_check; then
        # Nettoyer les anciennes sauvegardes
        cleanup_old_backups
        
        # Afficher les informations
        show_deployment_info
        
        log_success "D√©ploiement termin√© avec succ√®s !"
        exit 0
    else
        log_error "√âchec du d√©ploiement - L'application n'est pas en bonne sant√©"
        
        # Rollback automatique
        log "üîÑ Tentative de rollback..."
        sudo systemctl stop "$SERVICE_NAME"
        if [ -f "$BINARY_PATH/api.backup.$(date +%Y%m%d-%H%M%S)" ]; then
            sudo cp "$BINARY_PATH/api.backup.$(date +%Y%m%d-%H%M%S)" "$BINARY_PATH/api"
            sudo systemctl start "$SERVICE_NAME"
        fi
        
        exit 1
    fi
}

# Gestion des erreurs
trap 'log_error "Erreur survenue √† la ligne $LINENO"; exit 1' ERR

# Ex√©cution du script principal
main "$@" 