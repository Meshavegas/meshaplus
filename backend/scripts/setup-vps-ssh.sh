#!/bin/bash

# üîß Script de Configuration SSH VPS - MeshaPlus Backend
# Ce script configure SSH sur le VPS pour le d√©ploiement

set -e

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîß Configuration SSH VPS - MeshaPlus Backend${NC}"
echo "============================================="
echo ""

# Demander les informations de connexion
echo -e "${YELLOW}üìã Entrez les informations de connexion VPS :${NC}"
echo ""

read -p "Adresse IP du VPS: " VPS_HOST
read -p "Nom d'utilisateur SSH: " VPS_USERNAME
read -p "Mot de passe SSH (si n√©cessaire): " -s VPS_PASSWORD
echo ""

# V√©rifier que les informations sont fournies
if [ -z "$VPS_HOST" ] || [ -z "$VPS_USERNAME" ]; then
    echo -e "${RED}‚ùå VPS_HOST et VPS_USERNAME sont requis${NC}"
    exit 1
fi

echo ""
echo -e "${BLUE}üìä Informations de connexion :${NC}"
echo "‚Ä¢ VPS_HOST: $VPS_HOST"
echo "‚Ä¢ VPS_USERNAME: $VPS_USERNAME"
echo ""

# √âtape 1: V√©rifier la cl√© SSH locale
echo -e "${YELLOW}üìã √âtape 1: V√©rification de la cl√© SSH locale${NC}"

if [ ! -f ~/.ssh/id_rsa ]; then
    echo -e "${RED}‚ùå Cl√© priv√©e non trouv√©e${NC}"
    echo -e "${BLUE}üí° G√©n√©ration d'une nouvelle cl√© SSH...${NC}"
    
    ssh-keygen -t rsa -b 4096 -C "meshaplus-deployment@$(hostname)" -f ~/.ssh/id_rsa -N ""
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Nouvelle cl√© SSH g√©n√©r√©e${NC}"
    else
        echo -e "${RED}‚ùå Erreur lors de la g√©n√©ration de la cl√©${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}‚úÖ Cl√© priv√©e trouv√©e: ~/.ssh/id_rsa${NC}"
fi

# √âtape 2: Test de connexion initiale
echo ""
echo -e "${YELLOW}üìã √âtape 2: Test de connexion initiale${NC}"

if [ -n "$VPS_PASSWORD" ]; then
    echo -e "${BLUE}üîó Test de connexion avec mot de passe...${NC}"
    
    # Test avec sshpass si disponible
    if command -v sshpass &> /dev/null; then
        if sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 "$VPS_USERNAME@$VPS_HOST" "echo 'Connexion avec mot de passe r√©ussie'" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Connexion avec mot de passe r√©ussie${NC}"
            CONNECTION_METHOD="password"
        else
            echo -e "${RED}‚ùå √âchec de la connexion avec mot de passe${NC}"
            CONNECTION_METHOD="none"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  sshpass non disponible, tentative de connexion manuelle${NC}"
        CONNECTION_METHOD="manual"
    fi
else
    echo -e "${BLUE}üîó Test de connexion sans mot de passe...${NC}"
    
    if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" "echo 'Connexion SSH r√©ussie'" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Connexion SSH r√©ussie (cl√© d√©j√† configur√©e)${NC}"
        CONNECTION_METHOD="key"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Connexion SSH √©chou√©e, configuration n√©cessaire${NC}"
        CONNECTION_METHOD="none"
    fi
fi

# √âtape 3: Configuration SSH sur le VPS
if [ "$CONNECTION_METHOD" != "key" ]; then
    echo ""
    echo -e "${YELLOW}üìã √âtape 3: Configuration SSH sur le VPS${NC}"
    
    if [ "$CONNECTION_METHOD" = "password" ] && command -v sshpass &> /dev/null; then
        echo -e "${BLUE}üîß Configuration SSH avec mot de passe...${NC}"
        
        # Copier la cl√© publique avec sshpass
        if sshpass -p "$VPS_PASSWORD" ssh-copy-id -i ~/.ssh/id_rsa.pub -o StrictHostKeyChecking=no "$VPS_USERNAME@$VPS_HOST"; then
            echo -e "${GREEN}‚úÖ Cl√© publique copi√©e avec succ√®s${NC}"
        else
            echo -e "${RED}‚ùå √âchec de la copie de la cl√© publique${NC}"
            echo -e "${YELLOW}üí° Tentative de copie manuelle...${NC}"
            
            # Copie manuelle
            PUBKEY=$(cat ~/.ssh/id_rsa.pub)
            sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no "$VPS_USERNAME@$VPS_HOST" "mkdir -p ~/.ssh && echo '$PUBKEY' >> ~/.ssh/authorized_keys && chmod 700 ~/.ssh && chmod 600 ~/.ssh/authorized_keys"
            
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}‚úÖ Cl√© publique copi√©e manuellement${NC}"
            else
                echo -e "${RED}‚ùå √âchec de la copie manuelle${NC}"
                exit 1
            fi
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Configuration manuelle requise${NC}"
        echo ""
        echo -e "${BLUE}üìã Instructions de configuration manuelle :${NC}"
        echo ""
        echo "1. Connectez-vous manuellement au VPS :"
        echo "   ssh $VPS_USERNAME@$VPS_HOST"
        echo ""
        echo "2. Cr√©ez le r√©pertoire SSH :"
        echo "   mkdir -p ~/.ssh"
        echo ""
        echo "3. Ajoutez votre cl√© publique :"
        echo "   echo '$(cat ~/.ssh/id_rsa.pub)' >> ~/.ssh/authorized_keys"
        echo ""
        echo "4. Configurez les permissions :"
        echo "   chmod 700 ~/.ssh"
        echo "   chmod 600 ~/.ssh/authorized_keys"
        echo ""
        echo "5. Testez la connexion :"
        echo "   ssh $VPS_USERNAME@$VPS_HOST"
        echo ""
        
        read -p "Appuyez sur Enter une fois la configuration manuelle termin√©e..."
    fi
fi

# √âtape 4: Test de connexion finale
echo ""
echo -e "${YELLOW}üìã √âtape 4: Test de connexion finale${NC}"

if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" "echo 'Connexion SSH finale r√©ussie'" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Connexion SSH finale r√©ussie${NC}"
else
    echo -e "${RED}‚ùå √âchec de la connexion SSH finale${NC}"
    echo ""
    echo -e "${YELLOW}üîç Debug de la connexion SSH :${NC}"
    ssh -v -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" "echo 'test'" 2>&1 | tail -10
    exit 1
fi

# √âtape 5: Configuration des pr√©requis sur le VPS
echo ""
echo -e "${YELLOW}üìã √âtape 5: Configuration des pr√©requis sur le VPS${NC}"

echo -e "${BLUE}üîç V√©rification de Docker...${NC}"
if ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" "command -v docker >/dev/null 2>&1 && echo 'Docker install√©' || echo 'Docker non install√©'" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Docker disponible${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Docker non disponible${NC}"
    echo -e "${BLUE}üí° Installation de Docker...${NC}"
    
    ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" << 'EOF'
        # Installation de Docker
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        sudo usermod -aG docker $USER
        echo "‚úÖ Docker install√©"
EOF
fi

echo -e "${BLUE}üîç V√©rification de Docker Compose...${NC}"
if ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" "command -v docker-compose >/dev/null 2>&1 && echo 'Docker Compose install√©' || echo 'Docker Compose non install√©'" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Docker Compose disponible${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Docker Compose non disponible${NC}"
    echo -e "${BLUE}üí° Installation de Docker Compose...${NC}"
    
    ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" << 'EOF'
        # Installation de Docker Compose
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        echo "‚úÖ Docker Compose install√©"
EOF
fi

echo -e "${BLUE}üîç Cr√©ation du r√©pertoire de d√©ploiement...${NC}"
ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" << 'EOF'
    # Cr√©er le r√©pertoire de d√©ploiement
    sudo mkdir -p /opt/meshaplus
    sudo chown $USER:$USER /opt/meshaplus
    echo "‚úÖ R√©pertoire de d√©ploiement cr√©√©: /opt/meshaplus"
EOF

# R√©sum√© final
echo ""
echo -e "${GREEN}üéâ Configuration SSH VPS termin√©e avec succ√®s !${NC}"
echo ""
echo -e "${BLUE}üìã R√©sum√© de la configuration :${NC}"
echo "‚úÖ Cl√© SSH locale v√©rifi√©e"
echo "‚úÖ Connexion SSH configur√©e"
echo "‚úÖ Docker install√©/configur√©"
echo "‚úÖ Docker Compose install√©/configur√©"
echo "‚úÖ R√©pertoire de d√©ploiement cr√©√©"
echo ""
echo -e "${BLUE}üìã Secrets GitHub √† configurer :${NC}"
echo "‚Ä¢ VPS_HOST: $VPS_HOST"
echo "‚Ä¢ VPS_USERNAME: $VPS_USERNAME"
echo "‚Ä¢ VPS_SSH_KEY: [contenu de ~/.ssh/id_rsa]"
echo "‚Ä¢ VPS_DEPLOY_PATH: /opt/meshaplus (optionnel)"
echo ""
echo -e "${BLUE}üí° Pour r√©cup√©rer la cl√© priv√©e :${NC}"
echo "cat ~/.ssh/id_rsa"
echo ""
echo -e "${BLUE}üöÄ Pr√™t pour le d√©ploiement !${NC}" 