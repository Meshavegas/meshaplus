#!/bin/bash

# üîß Script d'Installation des Services Locaux - MeshaPlus Backend
# Ce script installe et configure PostgreSQL et Redis sur le VPS

set -e

# Couleurs pour les logs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fonction de logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Mise √† jour du syst√®me
update_system() {
    log "üîÑ Mise √† jour du syst√®me..."
    
    sudo apt update
    sudo apt upgrade -y
    
    log_success "Syst√®me mis √† jour"
}

# Installation de PostgreSQL
install_postgresql() {
    log "üêò Installation de PostgreSQL..."
    
    # Installer PostgreSQL
    sudo apt install -y postgresql postgresql-contrib
    
    # D√©marrer et activer le service
    sudo systemctl start postgresql
    sudo systemctl enable postgresql
    
    # V√©rifier le statut
    if sudo systemctl is-active --quiet postgresql; then
        log_success "PostgreSQL install√© et d√©marr√©"
    else
        log_error "√âchec du d√©marrage de PostgreSQL"
        exit 1
    fi
}

# Configuration de PostgreSQL
configure_postgresql() {
    log "‚öôÔ∏è Configuration de PostgreSQL..."
    
    # Cr√©er la base de donn√©es et l'utilisateur
    sudo -u postgres psql << EOF
-- Cr√©er la base de donn√©es
CREATE DATABASE meshaplus;

-- Cr√©er l'utilisateur avec mot de passe
CREATE USER meshaplus WITH PASSWORD 'meshaplus_password';

-- Donner les privil√®ges
GRANT ALL PRIVILEGES ON DATABASE meshaplus TO meshaplus;

-- Se connecter √† la base de donn√©es
\c meshaplus

-- Donner les privil√®ges sur le sch√©ma public
GRANT ALL ON SCHEMA public TO meshaplus;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO meshaplus;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO meshaplus;

-- Configurer les privil√®ges par d√©faut
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO meshaplus;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO meshaplus;

\q
EOF

    log_success "PostgreSQL configur√©"
}

# Installation de Redis
install_redis() {
    log "üî¥ Installation de Redis..."
    
    # Installer Redis
    sudo apt install -y redis-server
    
    # D√©marrer et activer le service
    sudo systemctl start redis-server
    sudo systemctl enable redis-server
    
    # V√©rifier le statut
    if sudo systemctl is-active --quiet redis-server; then
        log_success "Redis install√© et d√©marr√©"
    else
        log_error "√âchec du d√©marrage de Redis"
        exit 1
    fi
}

# Configuration de Redis
configure_redis() {
    log "‚öôÔ∏è Configuration de Redis..."
    
    # Sauvegarder la configuration originale
    sudo cp /etc/redis/redis.conf /etc/redis/redis.conf.backup
    
    # Modifier la configuration pour la production
    sudo sed -i 's/bind 127.0.0.1/bind 127.0.0.1/' /etc/redis/redis.conf
    sudo sed -i 's/# maxmemory <bytes>/maxmemory 256mb/' /etc/redis/redis.conf
    sudo sed -i 's/# maxmemory-policy noeviction/maxmemory-policy allkeys-lru/' /etc/redis/redis.conf
    
    # Red√©marrer Redis
    sudo systemctl restart redis-server
    
    # Tester la connexion
    if redis-cli ping | grep -q "PONG"; then
        log_success "Redis configur√© et fonctionnel"
    else
        log_error "√âchec de la configuration de Redis"
        exit 1
    fi
}

# Installation de Nginx (optionnel)
install_nginx() {
    log "üåê Installation de Nginx..."
    
    # Installer Nginx
    sudo apt install -y nginx
    
    # D√©marrer et activer le service
    sudo systemctl start nginx
    sudo systemctl enable nginx
    
    # Configurer le firewall
    sudo ufw allow 'Nginx Full'
    
    # V√©rifier le statut
    if sudo systemctl is-active --quiet nginx; then
        log_success "Nginx install√© et d√©marr√©"
    else
        log_error "√âchec du d√©marrage de Nginx"
        exit 1
    fi
}

# Configuration du firewall
configure_firewall() {
    log "üî• Configuration du firewall..."
    
    # Installer UFW si pas d√©j√† install√©
    if ! command -v ufw &> /dev/null; then
        sudo apt install -y ufw
    fi
    
    # Activer UFW
    sudo ufw --force enable
    
    # Autoriser SSH
    sudo ufw allow ssh
    
    # Autoriser HTTP et HTTPS
    sudo ufw allow 80
    sudo ufw allow 443
    
    # Autoriser le port de l'API (optionnel, car derri√®re Nginx)
    # sudo ufw allow 8080
    
    log_success "Firewall configur√©"
}

# Installation des outils de monitoring
install_monitoring_tools() {
    log "üìä Installation des outils de monitoring..."
    
    # Installer htop pour le monitoring syst√®me
    sudo apt install -y htop
    
    # Installer net-tools pour les commandes r√©seau
    sudo apt install -y net-tools
    
    # Installer curl pour les tests
    sudo apt install -y curl
    
    log_success "Outils de monitoring install√©s"
}

# Test des services
test_services() {
    log "üß™ Test des services..."
    
    # Test PostgreSQL
    if pg_isready -h localhost -p 5432 >/dev/null 2>&1; then
        log_success "PostgreSQL est accessible"
    else
        log_error "PostgreSQL n'est pas accessible"
        return 1
    fi
    
    # Test Redis
    if redis-cli ping | grep -q "PONG"; then
        log_success "Redis est accessible"
    else
        log_error "Redis n'est pas accessible"
        return 1
    fi
    
    # Test Nginx
    if curl -f http://localhost >/dev/null 2>&1; then
        log_success "Nginx est accessible"
    else
        log_warning "Nginx n'est pas accessible (normal si pas encore configur√©)"
    fi
    
    log_success "Tous les services test√©s"
}

# Affichage des informations de configuration
show_configuration_info() {
    log "üìã Informations de configuration..."
    
    echo ""
    echo "üéâ Installation des services termin√©e !"
    echo ""
    echo "üìã Services install√©s :"
    echo "‚Ä¢ PostgreSQL: localhost:5432"
    echo "  - Base de donn√©es: meshaplus"
    echo "  - Utilisateur: meshaplus"
    echo "  - Mot de passe: meshaplus_password"
    echo ""
    echo "‚Ä¢ Redis: localhost:6379"
    echo "  - Pas de mot de passe"
    echo "  - M√©moire max: 256MB"
    echo ""
    echo "‚Ä¢ Nginx: localhost:80"
    echo "  - Pr√™t pour la configuration de proxy"
    echo ""
    echo "üîç Commandes utiles :"
    echo "‚Ä¢ Statut PostgreSQL: sudo systemctl status postgresql"
    echo "‚Ä¢ Statut Redis: sudo systemctl status redis-server"
    echo "‚Ä¢ Statut Nginx: sudo systemctl status nginx"
    echo "‚Ä¢ Logs PostgreSQL: sudo tail -f /var/log/postgresql/postgresql-*.log"
    echo "‚Ä¢ Logs Redis: sudo tail -f /var/log/redis/redis-server.log"
    echo "‚Ä¢ Logs Nginx: sudo tail -f /var/log/nginx/access.log"
    echo ""
    echo "‚ö†Ô∏è  IMPORTANT :"
    echo "‚Ä¢ Changez le mot de passe PostgreSQL en production"
    echo "‚Ä¢ Configurez Redis avec un mot de passe en production"
    echo "‚Ä¢ Mettez √† jour la configuration de l'application"
    echo ""
}

# Fonction principale
main() {
    log "üîß D√©but de l'installation des services locaux"
    echo "============================================"
    
    # Mettre √† jour le syst√®me
    update_system
    
    # Installer PostgreSQL
    install_postgresql
    configure_postgresql
    
    # Installer Redis
    install_redis
    configure_redis
    
    # Installer Nginx
    install_nginx
    
    # Configurer le firewall
    configure_firewall
    
    # Installer les outils de monitoring
    install_monitoring_tools
    
    # Tester les services
    if test_services; then
        # Afficher les informations
        show_configuration_info
        
        log_success "Installation termin√©e avec succ√®s !"
        exit 0
    else
        log_error "√âchec des tests des services"
        exit 1
    fi
}

# Gestion des erreurs
trap 'log_error "Erreur survenue √† la ligne $LINENO"; exit 1' ERR

# Ex√©cution du script principal
main "$@" 