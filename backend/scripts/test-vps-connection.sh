#!/bin/bash

# üß™ Script de Test de Connexion VPS - MeshaPlus Backend
# Ce script teste la connexion VPS avec des valeurs de test

set -e

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üß™ Test de Connexion VPS - MeshaPlus Backend${NC}"
echo "============================================="
echo ""

# Demander les informations de connexion
echo -e "${YELLOW}üìã Entrez les informations de connexion VPS :${NC}"
echo ""

read -p "Adresse IP du VPS: " VPS_HOST
read -p "Nom d'utilisateur SSH: " VPS_USERNAME
read -p "Chemin de d√©ploiement (ex: /opt/meshaplus): " VPS_DEPLOY_PATH

# V√©rifier que les informations sont fournies
if [ -z "$VPS_HOST" ] || [ -z "$VPS_USERNAME" ] || [ -z "$VPS_DEPLOY_PATH" ]; then
    echo -e "${RED}‚ùå Toutes les informations sont requises${NC}"
    exit 1
fi

echo ""
echo -e "${BLUE}üìä Informations de connexion :${NC}"
echo "‚Ä¢ VPS_HOST: $VPS_HOST"
echo "‚Ä¢ VPS_USERNAME: $VPS_USERNAME"
echo "‚Ä¢ VPS_DEPLOY_PATH: $VPS_DEPLOY_PATH"
echo ""

# Test 1: V√©rifier la cl√© SSH
echo -e "${YELLOW}üìã Test 1: V√©rification de la cl√© SSH${NC}"

if [ -f ~/.ssh/id_rsa ]; then
    echo -e "${GREEN}‚úÖ Cl√© priv√©e trouv√©e: ~/.ssh/id_rsa${NC}"
    
    # V√©rifier les permissions
    if [ -r ~/.ssh/id_rsa ]; then
        echo -e "${GREEN}‚úÖ Cl√© priv√©e lisible${NC}"
    else
        echo -e "${RED}‚ùå Cl√© priv√©e non lisible${NC}"
        chmod 600 ~/.ssh/id_rsa
        echo -e "${YELLOW}‚ö†Ô∏è  Permissions corrig√©es${NC}"
    fi
else
    echo -e "${RED}‚ùå Cl√© priv√©e non trouv√©e${NC}"
    echo -e "${YELLOW}üí° G√©n√©rer une nouvelle cl√© :${NC}"
    echo "ssh-keygen -t rsa -b 4096 -C 'meshaplus-deployment@example.com'"
    exit 1
fi

# Test 2: Test de connectivit√© r√©seau
echo ""
echo -e "${YELLOW}üìã Test 2: Test de connectivit√© r√©seau${NC}"

if ping -c 1 "$VPS_HOST" >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ VPS accessible via ping${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  VPS non accessible via ping (peut √™tre normal)${NC}"
fi

# Test 3: Test de connexion SSH
echo ""
echo -e "${YELLOW}üìã Test 3: Test de connexion SSH${NC}"

echo -e "${BLUE}üîó Tentative de connexion SSH...${NC}"

if ssh -o ConnectTimeout=10 -o BatchMode=yes -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" "echo 'Connexion SSH r√©ussie'" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Connexion SSH r√©ussie${NC}"
    SSH_WORKING=true
else
    echo -e "${RED}‚ùå √âchec de la connexion SSH${NC}"
    SSH_WORKING=false
    
    echo ""
    echo -e "${YELLOW}üîç Debug de la connexion SSH :${NC}"
    echo "ssh -v -i ~/.ssh/id_rsa $VPS_USERNAME@$VPS_HOST"
    echo ""
    
    # Test avec verbose
    echo -e "${BLUE}üîç Test avec verbose (derni√®res lignes) :${NC}"
    ssh -v -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" "echo 'test'" 2>&1 | tail -10
fi

# Test 4: Test de copie de fichiers (si SSH fonctionne)
if [ "$SSH_WORKING" = true ]; then
    echo ""
    echo -e "${YELLOW}üìã Test 4: Test de copie de fichiers${NC}"
    
    # Cr√©er un fichier de test
    echo "Test file created at $(date)" > test-file.txt
    
    echo -e "${BLUE}üìÅ Test de copie de fichier...${NC}"
    
    if scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa test-file.txt "$VPS_USERNAME@$VPS_HOST:$VPS_DEPLOY_PATH/" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Copie de fichier r√©ussie${NC}"
        
        # V√©rifier que le fichier existe sur le VPS
        if ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" "test -f $VPS_DEPLOY_PATH/test-file.txt && echo 'Fichier trouv√© sur le VPS'" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Fichier v√©rifi√© sur le VPS${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Fichier non trouv√© sur le VPS${NC}"
        fi
        
        # Nettoyer le fichier de test
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" "rm -f $VPS_DEPLOY_PATH/test-file.txt" 2>/dev/null
    else
        echo -e "${RED}‚ùå √âchec de la copie de fichier${NC}"
    fi
    
    # Nettoyer le fichier local
    rm -f test-file.txt
fi

# Test 5: V√©rification des pr√©requis sur le VPS
if [ "$SSH_WORKING" = true ]; then
    echo ""
    echo -e "${YELLOW}üìã Test 5: V√©rification des pr√©requis sur le VPS${NC}"
    
    echo -e "${BLUE}üîç V√©rification de Docker...${NC}"
    if ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" "command -v docker >/dev/null 2>&1 && echo 'Docker install√©' || echo 'Docker non install√©'" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Docker disponible${NC}"
    else
        echo -e "${RED}‚ùå Docker non disponible${NC}"
    fi
    
    echo -e "${BLUE}üîç V√©rification de Docker Compose...${NC}"
    if ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" "command -v docker-compose >/dev/null 2>&1 && echo 'Docker Compose install√©' || echo 'Docker Compose non install√©'" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Docker Compose disponible${NC}"
    else
        echo -e "${RED}‚ùå Docker Compose non disponible${NC}"
    fi
    
    echo -e "${BLUE}üîç V√©rification du r√©pertoire de d√©ploiement...${NC}"
    if ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" "test -d $VPS_DEPLOY_PATH && echo 'R√©pertoire existe' || echo 'R√©pertoire inexistant'" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ R√©pertoire de d√©ploiement existe${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  R√©pertoire de d√©ploiement inexistant${NC}"
        echo -e "${BLUE}üí° Cr√©ation du r√©pertoire...${NC}"
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "$VPS_USERNAME@$VPS_HOST" "sudo mkdir -p $VPS_DEPLOY_PATH && sudo chown $VPS_USERNAME:$VPS_USERNAME $VPS_DEPLOY_PATH" 2>/dev/null
        echo -e "${GREEN}‚úÖ R√©pertoire cr√©√©${NC}"
    fi
fi

# R√©sum√©
echo ""
echo -e "${BLUE}üìã R√©sum√© du test :${NC}"

if [ "$SSH_WORKING" = true ]; then
    echo -e "${GREEN}‚úÖ Connexion SSH fonctionnelle${NC}"
    echo -e "${GREEN}‚úÖ Pr√™t pour le d√©ploiement${NC}"
    echo ""
    echo -e "${BLUE}üìã Secrets GitHub √† configurer :${NC}"
    echo "‚Ä¢ VPS_HOST: $VPS_HOST"
    echo "‚Ä¢ VPS_USERNAME: $VPS_USERNAME"
    echo "‚Ä¢ VPS_DEPLOY_PATH: $VPS_DEPLOY_PATH"
    echo "‚Ä¢ VPS_SSH_KEY: [contenu de ~/.ssh/id_rsa]"
    echo ""
    echo -e "${BLUE}üí° Pour r√©cup√©rer la cl√© priv√©e :${NC}"
    echo "cat ~/.ssh/id_rsa"
else
    echo -e "${RED}‚ùå Connexion SSH √©chou√©e${NC}"
    echo ""
    echo -e "${YELLOW}üîç Suggestions de r√©solution :${NC}"
    echo "1. V√©rifiez que la cl√© publique est install√©e sur le VPS"
    echo "2. V√©rifiez les permissions SSH sur le VPS"
    echo "3. V√©rifiez que SSH est activ√© sur le VPS"
    echo "4. V√©rifiez les logs SSH : ssh $VPS_USERNAME@$VPS_HOST 'sudo tail -f /var/log/auth.log'"
fi 