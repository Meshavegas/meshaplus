#!/bin/bash

# üöÄ Script de D√©ploiement VPS - MeshaPlus Backend
# Ce script est ex√©cut√© sur le VPS pour d√©ployer l'application

set -e

# Configuration
APP_NAME="meshaplus-backend"
DEPLOY_PATH="/opt/meshaplus"
BACKUP_PATH="/opt/meshaplus/backups"
LOG_PATH="/var/log/meshaplus"

# Couleurs pour les logs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fonction de logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log "üîç V√©rification des pr√©requis..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier que le binaire existe
    if [ ! -f "bin/api" ]; then
        log_error "Le binaire bin/api n'existe pas"
        exit 1
    fi
    
    log_success "Pr√©requis v√©rifi√©s"
}

# Cr√©ation des r√©pertoires n√©cessaires
setup_directories() {
    log "üìÅ Cr√©ation des r√©pertoires..."
    
    mkdir -p "$DEPLOY_PATH"
    mkdir -p "$BACKUP_PATH"
    mkdir -p "$LOG_PATH"
    mkdir -p "$DEPLOY_PATH/configs"
    mkdir -p "$DEPLOY_PATH/scripts"
    
    log_success "R√©pertoires cr√©√©s"
}

# Sauvegarde de l'ancienne version
backup_previous_version() {
    log "üíæ Sauvegarde de l'ancienne version..."
    
    if docker ps -q -f name="$APP_NAME" | grep -q .; then
        # Arr√™ter l'ancienne version
        docker-compose down || true
        
        # Cr√©er une sauvegarde
        if [ -f "docker-compose.yml" ]; then
            cp docker-compose.yml "$BACKUP_PATH/docker-compose-$(date +%Y%m%d-%H%M%S).yml"
        fi
        
        log_success "Ancienne version sauvegard√©e"
    else
        log_warning "Aucune version pr√©c√©dente en cours d'ex√©cution"
    fi
}

# Construction de l'image Docker
build_docker_image() {
    log "üèóÔ∏è Construction de l'image Docker..."
    
    # Supprimer l'ancienne image
    docker rmi "$APP_NAME:latest" 2>/dev/null || true
    
    # Construire la nouvelle image
    docker build -t "$APP_NAME:latest" . 2>&1 | tee "$LOG_PATH/build-$(date +%Y%m%d-%H%M%S).log"
    
    if [ $? -eq 0 ]; then
        log_success "Image Docker construite avec succ√®s"
    else
        log_error "√âchec de la construction de l'image Docker"
        exit 1
    fi
}

# D√©marrage de l'application
start_application() {
    log "üöÄ D√©marrage de l'application..."
    
    # D√©marrer les conteneurs
    docker-compose up -d 2>&1 | tee "$LOG_PATH/start-$(date +%Y%m%d-%H%M%S).log"
    
    if [ $? -eq 0 ]; then
        log_success "Application d√©marr√©e"
    else
        log_error "√âchec du d√©marrage de l'application"
        exit 1
    fi
}

# V√©rification de la sant√© de l'application
health_check() {
    log "üè• V√©rification de la sant√© de l'application..."
    
    # Attendre que l'application soit pr√™te
    sleep 30
    
    # Test de sant√©
    for i in {1..10}; do
        if curl -f http://localhost:8080/api/v1/health >/dev/null 2>&1; then
            log_success "Application en bonne sant√©"
            return 0
        fi
        
        log_warning "Tentative $i/10 - Application pas encore pr√™te"
        sleep 10
    done
    
    log_error "L'application n'est pas en bonne sant√© apr√®s 10 tentatives"
    return 1
}

# Nettoyage des anciennes images
cleanup_old_images() {
    log "üßπ Nettoyage des anciennes images..."
    
    # Supprimer les images non utilis√©es
    docker image prune -f
    
    # Supprimer les conteneurs arr√™t√©s
    docker container prune -f
    
    log_success "Nettoyage termin√©"
}

# Affichage des informations de d√©ploiement
show_deployment_info() {
    log "üìä Informations de d√©ploiement..."
    
    echo ""
    echo "üéâ D√©ploiement termin√© avec succ√®s !"
    echo ""
    echo "üìã Informations :"
    echo "‚Ä¢ Application: $APP_NAME"
    echo "‚Ä¢ Version: $(date +%Y-%m-%d\ %H:%M:%S)"
    echo "‚Ä¢ Port: 8080"
    echo "‚Ä¢ Logs: $LOG_PATH"
    echo "‚Ä¢ Backups: $BACKUP_PATH"
    echo ""
    echo "üîç Commandes utiles :"
    echo "‚Ä¢ Voir les logs: docker-compose logs -f"
    echo "‚Ä¢ Statut: docker-compose ps"
    echo "‚Ä¢ Arr√™ter: docker-compose down"
    echo "‚Ä¢ Red√©marrer: docker-compose restart"
    echo ""
}

# Fonction principale
main() {
    log "üöÄ D√©but du d√©ploiement MeshaPlus Backend"
    echo "====================================="
    
    # V√©rifier les pr√©requis
    check_prerequisites
    
    # Cr√©er les r√©pertoires
    setup_directories
    
    # Sauvegarder l'ancienne version
    backup_previous_version
    
    # Construire l'image Docker
    build_docker_image
    
    # D√©marrer l'application
    start_application
    
    # V√©rifier la sant√©
    if health_check; then
        # Nettoyer les anciennes images
        cleanup_old_images
        
        # Afficher les informations
        show_deployment_info
        
        log_success "D√©ploiement termin√© avec succ√®s !"
        exit 0
    else
        log_error "√âchec du d√©ploiement - L'application n'est pas en bonne sant√©"
        
        # Rollback automatique
        log "üîÑ Tentative de rollback..."
        docker-compose down
        docker rmi "$APP_NAME:latest" 2>/dev/null || true
        
        exit 1
    fi
}

# Gestion des erreurs
trap 'log_error "Erreur survenue √† la ligne $LINENO"; exit 1' ERR

# Ex√©cution du script principal
main "$@" 