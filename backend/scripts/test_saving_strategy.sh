#!/bin/bash

# Script de test pour les routes SavingStrategy
# Ce script teste toutes les fonctionnalit√©s CRUD et sp√©cialis√©es des strat√©gies d'√©pargne

set -e

# Configuration
BASE_URL="http://localhost:8080/api/v1"
EMAIL="test@example.com"
PASSWORD="password123"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üß™ Tests des routes SavingStrategy${NC}"
echo "=================================="

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
        exit 1
    fi
}

# 1. Inscription d'un utilisateur
echo -e "\n${YELLOW}1. Inscription d'un utilisateur...${NC}"
REGISTER_RESPONSE=$(curl -s -X POST "$BASE_URL/auth/register" \
    -H "Content-Type: application/json" \
    -d "{
        \"email\": \"$EMAIL\",
        \"password\": \"$PASSWORD\",
        \"name\": \"Test User\"
    }")

echo "R√©ponse d'inscription: $REGISTER_RESPONSE"

# 2. Connexion de l'utilisateur
echo -e "\n${YELLOW}2. Connexion de l'utilisateur...${NC}"
LOGIN_RESPONSE=$(curl -s -X POST "$BASE_URL/auth/login" \
    -H "Content-Type: application/json" \
    -d "{
        \"email\": \"$EMAIL\",
        \"password\": \"$PASSWORD\"
    }")

echo "R√©ponse de connexion: $LOGIN_RESPONSE"

# Extraction du token
TOKEN=$(echo $LOGIN_RESPONSE | jq -r '.data.access_token')
if [ "$TOKEN" = "null" ] || [ -z "$TOKEN" ]; then
    echo -e "${RED}‚ùå Impossible d'extraire le token${NC}"
    exit 1
fi

echo -e "${GREEN}Token extrait: ${TOKEN:0:20}...${NC}"

# 3. Cr√©ation d'une strat√©gie d'√©pargne par pourcentage
echo -e "\n${YELLOW}3. Cr√©ation d'une strat√©gie d'√©pargne par pourcentage...${NC}"
PERCENTAGE_STRATEGY_RESPONSE=$(curl -s -X POST "$BASE_URL/saving-strategies" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $TOKEN" \
    -d "{
        \"strategy_name\": \"√âpargne 20% du salaire\",
        \"type\": \"percentage\",
        \"amount\": 20.0,
        \"frequency\": \"monthly\"
    }")

echo "R√©ponse cr√©ation strat√©gie pourcentage: $PERCENTAGE_STRATEGY_RESPONSE"

PERCENTAGE_STRATEGY_ID=$(echo $PERCENTAGE_STRATEGY_RESPONSE | jq -r '.data.id')
if [ "$PERCENTAGE_STRATEGY_ID" = "null" ] || [ -z "$PERCENTAGE_STRATEGY_ID" ]; then
    echo -e "${RED}‚ùå Impossible d'extraire l'ID de la strat√©gie pourcentage${NC}"
    exit 1
fi

print_result $? "Strat√©gie d'√©pargne par pourcentage cr√©√©e"

# 4. Cr√©ation d'une strat√©gie d'√©pargne fixe
echo -e "\n${YELLOW}4. Cr√©ation d'une strat√©gie d'√©pargne fixe...${NC}"
FIXED_STRATEGY_RESPONSE=$(curl -s -X POST "$BASE_URL/saving-strategies" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $TOKEN" \
    -d "{
        \"strategy_name\": \"√âpargne fixe 500‚Ç¨\",
        \"type\": \"fixed\",
        \"amount\": 500.0,
        \"frequency\": \"monthly\"
    }")

echo "R√©ponse cr√©ation strat√©gie fixe: $FIXED_STRATEGY_RESPONSE"

FIXED_STRATEGY_ID=$(echo $FIXED_STRATEGY_RESPONSE | jq -r '.data.id')
if [ "$FIXED_STRATEGY_ID" = "null" ] || [ -z "$FIXED_STRATEGY_ID" ]; then
    echo -e "${RED}‚ùå Impossible d'extraire l'ID de la strat√©gie fixe${NC}"
    exit 1
fi

print_result $? "Strat√©gie d'√©pargne fixe cr√©√©e"

# 5. Cr√©ation d'une strat√©gie d'√©pargne bas√©e sur un objectif
echo -e "\n${YELLOW}5. Cr√©ation d'une strat√©gie d'√©pargne bas√©e sur un objectif...${NC}"
GOAL_STRATEGY_RESPONSE=$(curl -s -X POST "$BASE_URL/saving-strategies" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $TOKEN" \
    -d "{
        \"strategy_name\": \"√âpargne pour vacances\",
        \"type\": \"goal_based\",
        \"amount\": 1000.0,
        \"frequency\": \"monthly\",
        \"target_goal_id\": \"123e4567-e89b-12d3-a456-426614174000\"
    }")

echo "R√©ponse cr√©ation strat√©gie objectif: $GOAL_STRATEGY_RESPONSE"

GOAL_STRATEGY_ID=$(echo $GOAL_STRATEGY_RESPONSE | jq -r '.data.id')
if [ "$GOAL_STRATEGY_ID" = "null" ] || [ -z "$GOAL_STRATEGY_ID" ]; then
    echo -e "${RED}‚ùå Impossible d'extraire l'ID de la strat√©gie objectif${NC}"
    exit 1
fi

print_result $? "Strat√©gie d'√©pargne bas√©e sur objectif cr√©√©e"

# 6. R√©cup√©ration de toutes les strat√©gies d'√©pargne
echo -e "\n${YELLOW}6. R√©cup√©ration de toutes les strat√©gies d'√©pargne...${NC}"
GET_ALL_RESPONSE=$(curl -s -X GET "$BASE_URL/saving-strategies" \
    -H "Authorization: Bearer $TOKEN")

echo "R√©ponse r√©cup√©ration toutes les strat√©gies: $GET_ALL_RESPONSE"

STRATEGIES_COUNT=$(echo $GET_ALL_RESPONSE | jq '.data | length')
if [ "$STRATEGIES_COUNT" -ge 3 ]; then
    print_result 0 "Toutes les strat√©gies d'√©pargne r√©cup√©r√©es ($STRATEGIES_COUNT strat√©gies)"
else
    print_result 1 "Nombre de strat√©gies incorrect: $STRATEGIES_COUNT"
fi

# 7. R√©cup√©ration d'une strat√©gie d'√©pargne par ID
echo -e "\n${YELLOW}7. R√©cup√©ration d'une strat√©gie d'√©pargne par ID...${NC}"
GET_ONE_RESPONSE=$(curl -s -X GET "$BASE_URL/saving-strategies/$PERCENTAGE_STRATEGY_ID" \
    -H "Authorization: Bearer $TOKEN")

echo "R√©ponse r√©cup√©ration strat√©gie par ID: $GET_ONE_RESPONSE"

RETRIEVED_ID=$(echo $GET_ONE_RESPONSE | jq -r '.data.id')
if [ "$RETRIEVED_ID" = "$PERCENTAGE_STRATEGY_ID" ]; then
    print_result 0 "Strat√©gie d'√©pargne r√©cup√©r√©e par ID"
else
    print_result 1 "ID de strat√©gie incorrect: $RETRIEVED_ID"
fi

# 8. R√©cup√©ration des strat√©gies d'√©pargne par type (pourcentage)
echo -e "\n${YELLOW}8. R√©cup√©ration des strat√©gies d'√©pargne par type (pourcentage)...${NC}"
GET_BY_TYPE_RESPONSE=$(curl -s -X GET "$BASE_URL/saving-strategies/type?type=percentage" \
    -H "Authorization: Bearer $TOKEN")

echo "R√©ponse r√©cup√©ration par type: $GET_BY_TYPE_RESPONSE"

PERCENTAGE_COUNT=$(echo $GET_BY_TYPE_RESPONSE | jq '.data | length')
if [ "$PERCENTAGE_COUNT" -eq 1 ]; then
    print_result 0 "Strat√©gies d'√©pargne par type r√©cup√©r√©es ($PERCENTAGE_COUNT strat√©gie pourcentage)"
else
    print_result 1 "Nombre de strat√©gies pourcentage incorrect: $PERCENTAGE_COUNT"
fi

# 9. Calcul du montant d'√©pargne pour une strat√©gie
echo -e "\n${YELLOW}9. Calcul du montant d'√©pargne pour une strat√©gie...${NC}"
CALCULATE_RESPONSE=$(curl -s -X GET "$BASE_URL/saving-strategies/$PERCENTAGE_STRATEGY_ID/calculate?base_amount=3000" \
    -H "Authorization: Bearer $TOKEN")

echo "R√©ponse calcul montant d'√©pargne: $CALCULATE_RESPONSE"

CALCULATED_AMOUNT=$(echo $CALCULATE_RESPONSE | jq -r '.data.saving_amount')
if [ "$CALCULATED_AMOUNT" = "600" ]; then
    print_result 0 "Montant d'√©pargne calcul√© correctement: $CALCULATED_AMOUNT‚Ç¨"
else
    print_result 1 "Montant d'√©pargne incorrect: $CALCULATED_AMOUNT‚Ç¨"
fi

# 10. Mise √† jour d'une strat√©gie d'√©pargne
echo -e "\n${YELLOW}10. Mise √† jour d'une strat√©gie d'√©pargne...${NC}"
UPDATE_RESPONSE=$(curl -s -X PUT "$BASE_URL/saving-strategies/$FIXED_STRATEGY_ID" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $TOKEN" \
    -d "{
        \"strategy_name\": \"√âpargne fixe 600‚Ç¨ (mise √† jour)\",
        \"amount\": 600.0
    }")

echo "R√©ponse mise √† jour: $UPDATE_RESPONSE"

UPDATED_AMOUNT=$(echo $UPDATE_RESPONSE | jq -r '.data.amount')
if [ "$UPDATED_AMOUNT" = "600" ]; then
    print_result 0 "Strat√©gie d'√©pargne mise √† jour correctement"
else
    print_result 1 "Montant mis √† jour incorrect: $UPDATED_AMOUNT"
fi

# 11. Suppression d'une strat√©gie d'√©pargne
echo -e "\n${YELLOW}11. Suppression d'une strat√©gie d'√©pargne...${NC}"
DELETE_RESPONSE=$(curl -s -X DELETE "$BASE_URL/saving-strategies/$GOAL_STRATEGY_ID" \
    -H "Authorization: Bearer $TOKEN")

echo "R√©ponse suppression: $DELETE_RESPONSE"

if echo $DELETE_RESPONSE | jq -e '.success' > /dev/null; then
    print_result 0 "Strat√©gie d'√©pargne supprim√©e avec succ√®s"
else
    print_result 1 "Erreur lors de la suppression"
fi

# 12. V√©rification que la strat√©gie a bien √©t√© supprim√©e
echo -e "\n${YELLOW}12. V√©rification de la suppression...${NC}"
GET_DELETED_RESPONSE=$(curl -s -X GET "$BASE_URL/saving-strategies/$GOAL_STRATEGY_ID" \
    -H "Authorization: Bearer $TOKEN")

echo "R√©ponse r√©cup√©ration strat√©gie supprim√©e: $GET_DELETED_RESPONSE"

if echo $GET_DELETED_RESPONSE | jq -e '.error' > /dev/null; then
    print_result 0 "Strat√©gie d'√©pargne bien supprim√©e (404 retourn√©)"
else
    print_result 1 "Strat√©gie d'√©pargne toujours accessible apr√®s suppression"
fi

# 13. V√©rification finale du nombre de strat√©gies
echo -e "\n${YELLOW}13. V√©rification finale du nombre de strat√©gies...${NC}"
FINAL_COUNT_RESPONSE=$(curl -s -X GET "$BASE_URL/saving-strategies" \
    -H "Authorization: Bearer $TOKEN")

FINAL_COUNT=$(echo $FINAL_COUNT_RESPONSE | jq '.data | length')
if [ "$FINAL_COUNT" -eq 2 ]; then
    print_result 0 "Nombre final de strat√©gies correct: $FINAL_COUNT"
else
    print_result 1 "Nombre final de strat√©gies incorrect: $FINAL_COUNT"
fi

echo -e "\n${GREEN}üéâ Tous les tests des routes SavingStrategy sont pass√©s avec succ√®s !${NC}"
echo "==================================" 