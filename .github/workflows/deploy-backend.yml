name: 🚀 Deploy Backend

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend
  GO_VERSION: '1.21'
  DOCKER_BUILDKIT: 1

jobs:
  # 🔍 Tests et Validation
  test:
    name: 🧪 Tests et Validation
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: meshaplus_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 📁 Setup working directory
        run: |
          cd backend
          echo "Working directory: $(pwd)"

      - name: 📦 Install dependencies
        run: |
          go mod download
          go mod tidy
          go install github.com/swaggo/swag/cmd/swag@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: 🔍 Lint code
        run: |
          golangci-lint run ./...

      - name: 🧪 Run tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.out
          flags: backend
          name: backend-coverage

      - name: 📚 Generate Swagger docs
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          swag init -g cmd/api/main.go -o ./docs

      - name: 🏗️ Build application
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            -ldflags='-w -s -extldflags "-static"' \
            -a -installsuffix cgo \
            -o bin/api \
            ./cmd/api

  # 🐳 Build Docker Image
  build:
    name: 🐳 Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=MeshaPlus Backend
            org.opencontainers.image.description=Backend API for MeshaPlus application
            org.opencontainers.image.vendor=MeshaPlus

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # 🚀 Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/vps_key
          chmod 600 ~/.ssh/vps_key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying to production VPS..."
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          echo "Digest: ${{ needs.build.outputs.image-digest }}"
          
          # Déploiement sur VPS Ubuntu avec Docker Compose
          # Assurez-vous que les secrets suivants sont configurés :
          # - VPS_HOST: Adresse IP ou domaine du VPS
          # - VPS_USERNAME: Nom d'utilisateur SSH
          # - VPS_SSH_KEY: Clé SSH privée pour accéder au VPS
          # - VPS_DOCKER_COMPOSE_PATH: Chemin vers le docker-compose.yml sur le VPS
          
          # Créer le fichier de configuration temporaire
          cat > docker-compose.prod.yml << EOF
          version: '3.8'
          services:
            backend:
              image: ${{ needs.build.outputs.image-tag }}
              container_name: meshaplus-backend
              restart: unless-stopped
              ports:
                - "8080:8080"
              environment:
                - DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}
                - REDIS_URL=${{ secrets.PROD_REDIS_URL }}
                - JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
                - NODE_ENV=production
              networks:
                - meshaplus-network
              
            postgres:
              image: postgres:15
              container_name: meshaplus-postgres
              restart: unless-stopped
              environment:
                - POSTGRES_DB=${{ secrets.PROD_DB_NAME }}
                - POSTGRES_USER=${{ secrets.PROD_DB_USER }}
                - POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - meshaplus-network
              
            redis:
              image: redis:7-alpine
              container_name: meshaplus-redis
              restart: unless-stopped
              networks:
                - meshaplus-network
              
            nginx:
              image: nginx:alpine
              container_name: meshaplus-nginx
              restart: unless-stopped
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx.conf:/etc/nginx/nginx.conf
                - ./ssl:/etc/nginx/ssl
              depends_on:
                - backend
              networks:
                - meshaplus-network
          
          volumes:
            postgres_data:
          
          networks:
            meshaplus-network:
              driver: bridge
          EOF
          
          # Créer la configuration Nginx
          cat > nginx.conf << EOF
          events {
              worker_connections 1024;
          }
          
          http {
              upstream backend {
                  server backend:8080;
              }
              
              server {
                  listen 80;
                  server_name ${{ secrets.VPS_DOMAIN }};
                  
                  location / {
                      proxy_pass http://backend;
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                  }
                  
                  location /swagger/ {
                      proxy_pass http://backend;
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                  }
              }
          }
          EOF
          
          echo "✅ Configuration files created"
          
          # Déployer sur le VPS
          echo "📡 Connecting to VPS..."
          
          # Copier les fichiers sur le VPS
          scp -o StrictHostKeyChecking=no -i ~/.ssh/vps_key docker-compose.prod.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_DOCKER_COMPOSE_PATH }}/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/vps_key nginx.conf ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_DOCKER_COMPOSE_PATH }}/
          
          # Exécuter le déploiement sur le VPS
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/vps_key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd ${{ secrets.VPS_DOCKER_COMPOSE_PATH }}
            
            # Arrêter les conteneurs existants
            docker-compose -f docker-compose.prod.yml down || true
            
            # Supprimer l'ancienne image
            docker rmi ${{ needs.build.outputs.image-tag }} || true
            
            # Démarrer les nouveaux conteneurs
            docker-compose -f docker-compose.prod.yml up -d
            
            # Vérifier que les conteneurs sont en cours d'exécution
            docker-compose -f docker-compose.prod.yml ps
            
            # Attendre que l'application soit prête
            sleep 30
            
            # Test de santé
            curl -f http://localhost:8080/api/v1/health || exit 1
            
            echo "✅ Production deployment completed successfully!"
          EOF
          
          echo "✅ Production deployment completed!"

      - name: 📱 Notification Telegram (Succès)
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ✅ **Déploiement Production Réussi!**
            
            🚀 **MeshaPlus Backend** a été déployé avec succès sur le VPS.
            
            📊 **Détails:**
            • **Image:** ${{ needs.build.outputs.image-tag }}
            • **Commit:** ${{ github.sha }}
            • **Branch:** ${{ github.ref_name }}
            • **Déployé par:** ${{ github.actor }}
            
            🌐 **URL:** https://${{ secrets.VPS_DOMAIN }}
            📖 **Swagger:** https://${{ secrets.VPS_DOMAIN }}/swagger/index.html
            
            📋 **Logs:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: 📱 Notification Telegram (Échec)
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            🚨 **Déploiement Production Échoué!**
            
            ❌ Le déploiement de **MeshaPlus Backend** sur le VPS a échoué.
            
            📊 **Détails:**
            • **Commit:** ${{ github.sha }}
            • **Branch:** ${{ github.ref_name }}
            • **Déployé par:** ${{ github.actor }}
            
            🔍 **Logs:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ⚠️ **Action requise:** Vérifier les logs et corriger le problème.

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/vps_key
          chmod 600 ~/.ssh/vps_key
          ssh-keyscan -H ${{ secrets.VPS_STAGING_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging VPS..."
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          echo "Digest: ${{ needs.build.outputs.image-digest }}"
          
          # Déploiement sur VPS Ubuntu Staging avec Docker Compose
          # Créer le fichier de configuration temporaire
          cat > docker-compose.staging.yml << EOF
          version: '3.8'
          services:
            backend:
              image: ${{ needs.build.outputs.image-tag }}
              container_name: meshaplus-backend-staging
              restart: unless-stopped
              ports:
                - "8081:8080"
              environment:
                - DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
                - REDIS_URL=${{ secrets.STAGING_REDIS_URL }}
                - JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}
                - NODE_ENV=staging
              networks:
                - meshaplus-staging-network
              
            postgres:
              image: postgres:15
              container_name: meshaplus-postgres-staging
              restart: unless-stopped
              environment:
                - POSTGRES_DB=${{ secrets.STAGING_DB_NAME }}
                - POSTGRES_USER=${{ secrets.STAGING_DB_USER }}
                - POSTGRES_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}
              volumes:
                - postgres_staging_data:/var/lib/postgresql/data
              networks:
                - meshaplus-staging-network
              
            redis:
              image: redis:7-alpine
              container_name: meshaplus-redis-staging
              restart: unless-stopped
              networks:
                - meshaplus-staging-network
              
            nginx:
              image: nginx:alpine
              container_name: meshaplus-nginx-staging
              restart: unless-stopped
              ports:
                - "8080:80"
              volumes:
                - ./nginx-staging.conf:/etc/nginx/nginx.conf
              depends_on:
                - backend
              networks:
                - meshaplus-staging-network
          
          volumes:
            postgres_staging_data:
          
          networks:
            meshaplus-staging-network:
              driver: bridge
          EOF
          
          # Créer la configuration Nginx pour staging
          cat > nginx-staging.conf << EOF
          events {
              worker_connections 1024;
          }
          
          http {
              upstream backend {
                  server backend:8080;
              }
              
              server {
                  listen 80;
                  server_name ${{ secrets.VPS_STAGING_DOMAIN }};
                  
                  location / {
                      proxy_pass http://backend;
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                  }
                  
                  location /swagger/ {
                      proxy_pass http://backend;
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                  }
              }
          }
          EOF
          
          echo "✅ Configuration files created"
          
          # Déployer sur le VPS Staging
          echo "📡 Connecting to staging VPS..."
          
          # Copier les fichiers sur le VPS
          scp -o StrictHostKeyChecking=no -i ~/.ssh/vps_key docker-compose.staging.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_STAGING_HOST }}:${{ secrets.VPS_DOCKER_COMPOSE_PATH }}/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/vps_key nginx-staging.conf ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_STAGING_HOST }}:${{ secrets.VPS_DOCKER_COMPOSE_PATH }}/
          
          # Exécuter le déploiement sur le VPS
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/vps_key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_STAGING_HOST }} << 'EOF'
            cd ${{ secrets.VPS_DOCKER_COMPOSE_PATH }}
            
            # Arrêter les conteneurs existants
            docker-compose -f docker-compose.staging.yml down || true
            
            # Supprimer l'ancienne image
            docker rmi ${{ needs.build.outputs.image-tag }} || true
            
            # Démarrer les nouveaux conteneurs
            docker-compose -f docker-compose.staging.yml up -d
            
            # Vérifier que les conteneurs sont en cours d'exécution
            docker-compose -f docker-compose.staging.yml ps
            
            # Attendre que l'application soit prête
            sleep 30
            
            # Test de santé
            curl -f http://localhost:8081/api/v1/health || exit 1
            
            echo "✅ Staging deployment completed successfully!"
          EOF
          
          echo "✅ Staging deployment completed!"

      - name: 📱 Notification Telegram (Succès Staging)
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ✅ **Déploiement Staging Réussi!**
            
            🧪 **MeshaPlus Backend** a été déployé avec succès sur l'environnement de staging.
            
            📊 **Détails:**
            • **Image:** ${{ needs.build.outputs.image-tag }}
            • **Commit:** ${{ github.sha }}
            • **Branch:** ${{ github.ref_name }}
            • **Déployé par:** ${{ github.actor }}
            
            🌐 **URL:** https://${{ secrets.VPS_STAGING_DOMAIN }}
            📖 **Swagger:** https://${{ secrets.VPS_STAGING_DOMAIN }}/swagger/index.html
            
            📋 **Logs:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: 📱 Notification Telegram (Échec Staging)
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            🚨 **Déploiement Staging Échoué!**
            
            ❌ Le déploiement de **MeshaPlus Backend** sur l'environnement de staging a échoué.
            
            📊 **Détails:**
            • **Commit:** ${{ github.sha }}
            • **Branch:** ${{ github.ref_name }}
            • **Déployé par:** ${{ github.actor }}
            
            🔍 **Logs:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ⚠️ **Action requise:** Vérifier les logs et corriger le problème.

  # 📊 Security Scan
  security:
    name: 🔒 Security Scan
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📋 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 📈 Performance Test
  performance:
    name: 📈 Performance Test
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Start application
        run: |
          docker run -d \
            --name meshaplus-backend-test \
            -p 8080:8080 \
            -e DATABASE_URL="postgres://postgres:postgres@localhost:5432/meshaplus_test?sslmode=disable" \
            -e REDIS_URL="redis://localhost:6379" \
            ${{ needs.build.outputs.image-tag }}
          
          # Wait for application to start
          sleep 30

      - name: 🧪 Run performance tests
        run: |
          # TODO: Add your performance testing logic here
          # Examples:
          # - Run k6 tests
          # - Run Apache Bench
          # - Run custom performance scripts
          
          echo "📈 Performance tests completed!"

      - name: 🧹 Cleanup
        if: always()
        run: |
          docker stop meshaplus-backend-test || true
          docker rm meshaplus-backend-test || true

  # 📢 Notifications
  notify:
    name: 📢 Notifications
    needs: [test, build, deploy-production, deploy-staging, security, performance]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📢 Notify on success
        if: success()
        run: |
          echo "✅ All workflows completed successfully!"
          echo "🚀 Backend deployed successfully!"
          echo "📊 Coverage and security scans completed!"
          
          # TODO: Add your notification logic here
          # Examples:
          # - Send Slack notification
          # - Send email
          # - Update status page
          # - Create GitHub release

      - name: 📢 Notify on failure
        if: failure()
        run: |
          echo "❌ Workflow failed!"
          echo "🔍 Check the logs for more details."
          
          # TODO: Add your failure notification logic here
          # Examples:
          # - Send Slack alert
          # - Send email to team
          # - Create GitHub issue 