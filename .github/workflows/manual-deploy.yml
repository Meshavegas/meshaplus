name: 🚀 Manual Deploy Backend

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string
      force:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend
  GO_VERSION: '1.21'

jobs:
  # 🔍 Quick Tests (if not forced)
  quick-test:
    name: 🧪 Quick Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.force }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: meshaplus_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 📁 Setup working directory
        run: cd backend

      - name: 📦 Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: 🧪 Run tests
        run: |
          go test -v ./...

  # 🐳 Build and Deploy
  deploy:
    name: 🚀 Deploy to ${{ inputs.environment }}
    needs: [quick-test]
    runs-on: ubuntu-latest
    if: always() && (needs.quick-test.result == 'success' || inputs.force == true)
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/vps_key
          chmod 600 ~/.ssh/vps_key
          if [ "${{ inputs.environment }}" = "production" ]; then
            ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          else
            ssh-keyscan -H ${{ secrets.VPS_STAGING_HOST }} >> ~/.ssh/known_hosts
          fi

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ inputs.version || 'latest' }}
            type=raw,value=manual-${{ github.run_number }}
          labels: |
            org.opencontainers.image.title=MeshaPlus Backend
            org.opencontainers.image.description=Backend API for MeshaPlus application
            org.opencontainers.image.vendor=MeshaPlus
            org.opencontainers.image.version=${{ inputs.version || 'latest' }}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 🚀 Deploy to ${{ inputs.environment }}
        run: |
          echo "🚀 Deploying to ${{ inputs.environment }} VPS..."
          echo "Image: ${{ steps.meta.outputs.tags }}"
          echo "Version: ${{ inputs.version || 'latest' }}"
          echo "Force: ${{ inputs.force }}"
          
          # Déploiement sur VPS Ubuntu
          if [ "${{ inputs.environment }}" = "production" ]; then
            echo "🔒 Deploying to production environment..."
            
            # Créer le fichier de configuration production
            cat > docker-compose.prod.yml << EOF
          version: '3.8'
          services:
            backend:
              image: ${{ steps.meta.outputs.tags }}
              container_name: meshaplus-backend
              restart: unless-stopped
              ports:
                - "8080:8080"
              environment:
                - DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}
                - REDIS_URL=${{ secrets.PROD_REDIS_URL }}
                - JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
                - NODE_ENV=production
              networks:
                - meshaplus-network
              
            postgres:
              image: postgres:15
              container_name: meshaplus-postgres
              restart: unless-stopped
              environment:
                - POSTGRES_DB=${{ secrets.PROD_DB_NAME }}
                - POSTGRES_USER=${{ secrets.PROD_DB_USER }}
                - POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - meshaplus-network
              
            redis:
              image: redis:7-alpine
              container_name: meshaplus-redis
              restart: unless-stopped
              networks:
                - meshaplus-network
              
            nginx:
              image: nginx:alpine
              container_name: meshaplus-nginx
              restart: unless-stopped
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx.conf:/etc/nginx/nginx.conf
                - ./ssl:/etc/nginx/ssl
              depends_on:
                - backend
              networks:
                - meshaplus-network
          
          volumes:
            postgres_data:
          
          networks:
            meshaplus-network:
              driver: bridge
          EOF
            
            # Créer la configuration Nginx
            cat > nginx.conf << EOF
          events {
              worker_connections 1024;
          }
          
          http {
              upstream backend {
                  server backend:8080;
              }
              
              server {
                  listen 80;
                  server_name ${{ secrets.VPS_DOMAIN }};
                  
                  location / {
                      proxy_pass http://backend;
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                  }
                  
                  location /swagger/ {
                      proxy_pass http://backend;
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                  }
              }
          }
          EOF
            
            # Déployer sur le VPS Production
            scp -o StrictHostKeyChecking=no -i ~/.ssh/vps_key docker-compose.prod.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_DOCKER_COMPOSE_PATH }}/
            scp -o StrictHostKeyChecking=no -i ~/.ssh/vps_key nginx.conf ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_DOCKER_COMPOSE_PATH }}/
            
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/vps_key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
              cd ${{ secrets.VPS_DOCKER_COMPOSE_PATH }}
              docker-compose -f docker-compose.prod.yml down || true
              docker rmi ${{ steps.meta.outputs.tags }} || true
              docker-compose -f docker-compose.prod.yml up -d
              docker-compose -f docker-compose.prod.yml ps
              sleep 30
              curl -f http://localhost:8080/api/v1/health || exit 1
              echo "✅ Production deployment completed successfully!"
            EOF
            
          else
            echo "🧪 Deploying to staging environment..."
            
            # Créer le fichier de configuration staging
            cat > docker-compose.staging.yml << EOF
          version: '3.8'
          services:
            backend:
              image: ${{ steps.meta.outputs.tags }}
              container_name: meshaplus-backend-staging
              restart: unless-stopped
              ports:
                - "8081:8080"
              environment:
                - DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
                - REDIS_URL=${{ secrets.STAGING_REDIS_URL }}
                - JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}
                - NODE_ENV=staging
              networks:
                - meshaplus-staging-network
              
            postgres:
              image: postgres:15
              container_name: meshaplus-postgres-staging
              restart: unless-stopped
              environment:
                - POSTGRES_DB=${{ secrets.STAGING_DB_NAME }}
                - POSTGRES_USER=${{ secrets.STAGING_DB_USER }}
                - POSTGRES_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}
              volumes:
                - postgres_staging_data:/var/lib/postgresql/data
              networks:
                - meshaplus-staging-network
              
            redis:
              image: redis:7-alpine
              container_name: meshaplus-redis-staging
              restart: unless-stopped
              networks:
                - meshaplus-staging-network
              
            nginx:
              image: nginx:alpine
              container_name: meshaplus-nginx-staging
              restart: unless-stopped
              ports:
                - "8080:80"
              volumes:
                - ./nginx-staging.conf:/etc/nginx/nginx.conf
              depends_on:
                - backend
              networks:
                - meshaplus-staging-network
          
          volumes:
            postgres_staging_data:
          
          networks:
            meshaplus-staging-network:
              driver: bridge
          EOF
            
            # Créer la configuration Nginx pour staging
            cat > nginx-staging.conf << EOF
          events {
              worker_connections 1024;
          }
          
          http {
              upstream backend {
                  server backend:8080;
              }
              
              server {
                  listen 80;
                  server_name ${{ secrets.VPS_STAGING_DOMAIN }};
                  
                  location / {
                      proxy_pass http://backend;
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                  }
                  
                  location /swagger/ {
                      proxy_pass http://backend;
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                  }
              }
          }
          EOF
            
            # Déployer sur le VPS Staging
            scp -o StrictHostKeyChecking=no -i ~/.ssh/vps_key docker-compose.staging.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_STAGING_HOST }}:${{ secrets.VPS_DOCKER_COMPOSE_PATH }}/
            scp -o StrictHostKeyChecking=no -i ~/.ssh/vps_key nginx-staging.conf ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_STAGING_HOST }}:${{ secrets.VPS_DOCKER_COMPOSE_PATH }}/
            
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/vps_key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_STAGING_HOST }} << 'EOF'
              cd ${{ secrets.VPS_DOCKER_COMPOSE_PATH }}
              docker-compose -f docker-compose.staging.yml down || true
              docker rmi ${{ steps.meta.outputs.tags }} || true
              docker-compose -f docker-compose.staging.yml up -d
              docker-compose -f docker-compose.staging.yml ps
              sleep 30
              curl -f http://localhost:8081/api/v1/health || exit 1
              echo "✅ Staging deployment completed successfully!"
            EOF
          fi
          
          echo "✅ Deployment to ${{ inputs.environment }} completed!"

      - name: 📱 Notification Telegram (Succès)
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ✅ **Déploiement Manuel Réussi!**
            
            🚀 **MeshaPlus Backend** a été déployé avec succès sur l'environnement **${{ inputs.environment }}**.
            
            📊 **Détails:**
            • **Environnement:** ${{ inputs.environment }}
            • **Version:** ${{ inputs.version || 'latest' }}
            • **Image:** ${{ steps.meta.outputs.tags }}
            • **Commit:** ${{ github.sha }}
            • **Déployé par:** ${{ github.actor }}
            
            🌐 **URL:** https://${{ inputs.environment == 'production' && secrets.VPS_DOMAIN || secrets.VPS_STAGING_DOMAIN }}
            📖 **Swagger:** https://${{ inputs.environment == 'production' && secrets.VPS_DOMAIN || secrets.VPS_STAGING_DOMAIN }}/swagger/index.html
            
            📋 **Logs:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: 📱 Notification Telegram (Échec)
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            🚨 **Déploiement Manuel Échoué!**
            
            ❌ Le déploiement de **MeshaPlus Backend** sur l'environnement **${{ inputs.environment }}** a échoué.
            
            📊 **Détails:**
            • **Environnement:** ${{ inputs.environment }}
            • **Version:** ${{ inputs.version || 'latest' }}
            • **Commit:** ${{ github.sha }}
            • **Déployé par:** ${{ github.actor }}
            
            🔍 **Logs:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ⚠️ **Action requise:** Vérifier les logs et corriger le problème. 