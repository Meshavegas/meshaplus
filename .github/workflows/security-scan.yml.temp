name: 🔒 Security & Quality Scan

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

jobs:
  # 🔍 Code Quality
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 📁 Setup working directory
        run: cd backend

      - name: 📦 Install dependencies
        run: |
          go mod download
          go mod tidy
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: 🔍 Run golangci-lint
        run: |
          golangci-lint run ./... --out-format=github-actions

      - name: 🔍 Run govulncheck
        run: |
          govulncheck ./...

      - name: 📊 Upload golangci-lint results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: golangci-lint-results.sarif

  # 🔒 Dependency Security
  dependency-check:
    name: 🔒 Dependency Security
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 📁 Setup working directory
        run: cd backend

      - name: 📦 Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: 🔍 Check for known vulnerabilities
        run: |
          go list -json -deps ./... | nancy sleuth

      - name: 🔍 Run govulncheck on dependencies
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  # 🐳 Container Security
  container-security:
    name: 🐳 Container Security
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=raw,value=security-scan

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: 📋 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 🔐 Secrets Detection
  secrets-detection:
    name: 🔐 Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./backend
          base: HEAD
          head: HEAD

  # 📊 Code Coverage
  code-coverage:
    name: 📊 Code Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: meshaplus_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 📁 Setup working directory
        run: cd backend

      - name: 📦 Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: 🧪 Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out
          go tool cover -html=coverage.out -o coverage.html

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.out
          flags: backend-security
          name: backend-security-coverage

      - name: 📊 Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ./backend/coverage.html

  # 📢 Security Summary
  security-summary:
    name: 📢 Security Summary
    runs-on: ubuntu-latest
    needs: [code-quality, dependency-check, container-security, secrets-detection, code-coverage]
    if: always()
    
    steps:
      - name: 📊 Generate security report
        run: |
          echo "🔒 Security & Quality Scan Summary" > security-report.md
          echo "==================================" >> security-report.md
          echo "" >> security-report.md
          echo "**Scan Date:** $(date)" >> security-report.md
          echo "**Repository:** ${{ github.repository }}" >> security-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## 📋 Job Results" >> security-report.md
          echo "" >> security-report.md
          echo "- **Code Quality:** ${{ needs.code-quality.result }}" >> security-report.md
          echo "- **Dependency Security:** ${{ needs.dependency-check.result }}" >> security-report.md
          echo "- **Container Security:** ${{ needs.container-security.result }}" >> security-report.md
          echo "- **Secrets Detection:** ${{ needs.secrets-detection.result }}" >> security-report.md
          echo "- **Code Coverage:** ${{ needs.code-coverage.result }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## 🚨 Security Alerts" >> security-report.md
          echo "" >> security-report.md
          if [ "${{ needs.code-quality.result }}" = "failure" ]; then
            echo "❌ **Code Quality Issues Found**" >> security-report.md
          fi
          if [ "${{ needs.dependency-check.result }}" = "failure" ]; then
            echo "❌ **Dependency Vulnerabilities Found**" >> security-report.md
          fi
          if [ "${{ needs.container-security.result }}" = "failure" ]; then
            echo "❌ **Container Security Issues Found**" >> security-report.md
          fi
          if [ "${{ needs.secrets-detection.result }}" = "failure" ]; then
            echo "❌ **Secrets Detected in Code**" >> security-report.md
          fi
          if [ "${{ needs.code-coverage.result }}" = "failure" ]; then
            echo "⚠️ **Low Code Coverage**" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## ✅ Recommendations" >> security-report.md
          echo "" >> security-report.md
          echo "1. Review and fix any security issues found" >> security-report.md
          echo "2. Update dependencies with known vulnerabilities" >> security-report.md
          echo "3. Improve code coverage if below threshold" >> security-report.md
          echo "4. Remove any secrets found in the codebase" >> security-report.md

      - name: 📤 Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: 📢 Create issue for security issues
        if: |
          needs.code-quality.result == 'failure' ||
          needs.dependency-check.result == 'failure' ||
          needs.container-security.result == 'failure' ||
          needs.secrets-detection.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔒 Security Issues Detected',
              body: report,
              labels: ['security', 'bug'],
              assignees: ['${{ github.repository_owner }}']
            }); 