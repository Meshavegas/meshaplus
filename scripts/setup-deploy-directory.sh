#!/bin/bash

# Script pour cr√©er le r√©pertoire de d√©ploiement sur le VPS
# Usage: ./setup-deploy-directory.sh [host] [username] [deploy_path]

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Param√®tres
HOST=${1:-""}
USERNAME=${2:-""}
DEPLOY_PATH=${3:-""}
KEY_PATH=${4:-"~/.ssh/meshaplus_deploy_key"}

# V√©rification des param√®tres
if [ -z "$HOST" ] || [ -z "$USERNAME" ]; then
    log_error "Usage: $0 <host> <username> [deploy_path] [key_path]"
    log_error "Example: $0 192.168.1.100 ubuntu /home/ubuntu/meshaplus"
    exit 1
fi

# Chemin de d√©ploiement par d√©faut
if [ -z "$DEPLOY_PATH" ]; then
    DEPLOY_PATH="/home/$USERNAME/meshaplus"
fi

KEY_PATH=$(eval echo "$KEY_PATH")

log_info "üìÅ Configuration du r√©pertoire de d√©ploiement"
log_info "Host: $HOST"
log_info "Username: $USERNAME"
log_info "Deploy Path: $DEPLOY_PATH"
log_info "SSH Key: $KEY_PATH"
echo

# 1. V√©rifier que la cl√© SSH existe
if [ ! -f "$KEY_PATH" ]; then
    log_error "Cl√© SSH introuvable: $KEY_PATH"
    log_info "G√©n√©rez d'abord une cl√© avec: ./scripts/generate-deploy-key.sh"
    exit 1
fi

log_success "Cl√© SSH trouv√©e: $KEY_PATH"
echo

# 2. Tester la connexion SSH
log_info "1. Test de connexion SSH..."
if ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i "$KEY_PATH" "$USERNAME@$HOST" "echo 'Connexion SSH r√©ussie'"; then
    log_success "Connexion SSH r√©ussie"
else
    log_error "√âchec de la connexion SSH"
    log_info "V√©rifiez que la cl√© publique est ajout√©e au VPS"
    exit 1
fi
echo

# 3. Cr√©er le r√©pertoire de d√©ploiement
log_info "2. Cr√©ation du r√©pertoire de d√©ploiement..."
ssh -o StrictHostKeyChecking=no -i "$KEY_PATH" "$USERNAME@$HOST" << EOF
    echo "üìÅ Cr√©ation du r√©pertoire: $DEPLOY_PATH"
    mkdir -p "$DEPLOY_PATH"
    
    echo "üìã V√©rification du r√©pertoire:"
    ls -la "$(dirname "$DEPLOY_PATH")"
    
    echo "üìã Contenu du r√©pertoire de d√©ploiement:"
    ls -la "$DEPLOY_PATH"
    
    echo "üîß Configuration des permissions:"
    chmod 755 "$DEPLOY_PATH"
    
    echo "üìä Espace disque disponible:"
    df -h "$(dirname "$DEPLOY_PATH")"
EOF

log_success "R√©pertoire de d√©ploiement cr√©√©: $DEPLOY_PATH"
echo

# 4. V√©rifier l'environnement Docker
log_info "3. V√©rification de l'environnement Docker..."
ssh -o StrictHostKeyChecking=no -i "$KEY_PATH" "$USERNAME@$HOST" << 'EOF'
    echo "üê≥ V√©rification de Docker:"
    docker --version || echo "‚ùå Docker non install√©"
    
    echo "üê≥ V√©rification de Docker Compose:"
    docker-compose --version || echo "‚ùå Docker Compose non install√©"
    
    echo "üê≥ V√©rification des conteneurs en cours:"
    docker ps -a || echo "‚ùå Impossible de lister les conteneurs"
    
    echo "üìä Utilisation des ressources:"
    free -h
    df -h /
EOF

echo

# 5. Test de copie de fichier
log_info "4. Test de copie de fichier..."
echo "Test file content" > /tmp/test_deploy.txt
if scp -o StrictHostKeyChecking=no -i "$KEY_PATH" /tmp/test_deploy.txt "$USERNAME@$HOST:$DEPLOY_PATH/"; then
    log_success "Test de copie r√©ussi"
    ssh -o StrictHostKeyChecking=no -i "$KEY_PATH" "$USERNAME@$HOST" "rm -f $DEPLOY_PATH/test_deploy.txt"
else
    log_error "Test de copie √©chou√©"
    exit 1
fi
rm -f /tmp/test_deploy.txt
echo

# 6. Instructions finales
log_info "üìù Instructions finales:"
echo
log_info "‚úÖ Le r√©pertoire de d√©ploiement est pr√™t: $DEPLOY_PATH"
log_info "üîß Pour configurer GitHub Secrets, utilisez:"
echo
log_info "VPS_DEPLOY_PATH: $DEPLOY_PATH"
echo
log_info "üöÄ Vous pouvez maintenant relancer le workflow GitHub Actions"
echo

log_success "üéâ Configuration du r√©pertoire de d√©ploiement termin√©e!"
log_info "Le VPS est pr√™t pour recevoir les fichiers de d√©ploiement" 